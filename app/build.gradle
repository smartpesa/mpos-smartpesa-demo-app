apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}


buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://maven.google.com' }
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.3.2'
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

android {
    compileSdkVersion 28
    useLibrary 'org.apache.http.legacy'

    defaultConfig {
        applicationId "com.smartpesa.smartpesa"
        minSdkVersion 22
        targetSdkVersion 28

        loadVersionSettings('version.properties')
        versionName getVName()
        versionCode getVCode();

        buildConfigField("String", "BUILD_TIME", "\"" + buildDate() + "\"")

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    signingConfigs {
        release {
        }
    }

    buildTypes {
        debug {
            ext.enableCrashlytics = false
            applicationIdSuffix '.dev'
        }
        release {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            minifyEnabled true
            signingConfig signingConfigs.release
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            if (!variant.getBuildType().isDebuggable()) {
                println("Copying mapping.txt")
                variant.assemble.doLast {
                    copy {
                        from "mapping.txt"
                        into "mappings"
                        rename { String fileName ->
                            "mapping-${variant.name}-v${defaultConfig.versionName}.${defaultConfig.versionCode}.txt"
                        }
                    }
                }
            }
        }
    }

    flavorDimensions "version"
    productFlavors {
        smartpesa {
            applicationId = "com.smartpesa.smartpesa"
        }
    }

    repositories {
        maven { url "https://jitpack.io" }
        maven { url "https://maven.google.com" }
        maven {
            url "https://bitbucket.org/smartpesa/maven/raw/master"
            credentials {
                username "YOUR_BITBUCKET_USERNAME"
                password "YOUR_BITBUCKET_PASSWORD"
            }
            authentication{
                basic(BasicAuthentication)
            }
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}

def loadVersionSettings(String fileName) {
    project.ext.versionFile = file(fileName);
    project.ext.versionProps = new Properties()
    versionProps.load(new FileInputStream(versionFile))

    project.ext.versionMajor = Integer.parseInt((String) versionProps['VERSION_MAJOR'])
    project.ext.versionMinor = Integer.parseInt((String) versionProps['VERSION_MINOR'])
    project.ext.versionPatch = Integer.parseInt((String) versionProps['VERSION_PATCH'])
    project.ext.versionBuild = Integer.parseInt((String) versionProps['VERSION_BUILD'])

    project.ext.set("archivesBaseName", "SmartPesa-v" + getVName());
}

int getVCode() {
    return project.ext.versionBuild
}

String getVName() {
    return "${project.ext.versionMajor}.${project.ext.versionMinor}.${project.ext.versionPatch}"
}

def buildDate() {
    new Date().format("yyyy-MM-dd'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))
}

ext {
    SUPPORT_V7_VERSION = "28.0.0"
    DAGGER_VERSION = "2.19"
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion '26.0.0'
            }
        }
    }
}

configurations {
    cleanedAnnotations
    compile.exclude group: 'org.jetbrains' , module:'annotations'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.android.support:appcompat-v7:${SUPPORT_V7_VERSION}"
    implementation "com.android.support:recyclerview-v7:${SUPPORT_V7_VERSION}"
    implementation "com.android.support:design:${SUPPORT_V7_VERSION}"
    implementation "com.android.support:cardview-v7:${SUPPORT_V7_VERSION}"
    implementation('com.mikepenz:materialdrawer:4.3.7@aar') {
        transitive = true
    }
    implementation('com.smartpesa:sdk:4.0.1.6') {
        transitive = true
        changing = true
    }
    implementation('com.smartpesa:spconnect:2.2.1') {
        changing = true;
    }
    implementation('com.github.afollestad.material-dialogs:core:0.8.5.7@aar') {
        transitive = true
    }
    implementation('com.github.florent37:androidparallax:1.0.1@aar') {
        transitive = true
    }
    implementation "com.google.dagger:dagger-android:$DAGGER_VERSION"
    implementation "com.google.dagger:dagger-android-support:$DAGGER_VERSION"
    implementation 'javax.annotation:javax.annotation-api:1.2'
    implementation 'com.jakewharton:butterknife:8.8.1'
    implementation 'com.jpardogo.materialtabstrip:library:1.0.6'
    implementation 'com.jakewharton.timber:timber:4.7.1'
    implementation 'uk.co.chrisjenx:calligraphy:2.3.0'
    implementation 'se.emilsjolander:stickylistheaders:2.7.0'
    implementation 'com.skyfishjy.ripplebackground:library:1.0.1'
    implementation 'com.nineoldandroids:library:2.4.0'
    implementation 'com.daimajia.easing:library:1.0.1@aar'
    implementation 'com.daimajia.androidanimations:library:1.1.3@aar'
    implementation 'com.github.PhilJay:MPAndroidChart:v2.1.3'
    implementation 'com.yalantis:phoenix:1.2.3'
    implementation 'com.github.castorflex.smoothprogressbar:library:1.1.0'
    implementation 'com.weiwangcn.betterspinner:library-material:1.1.0'
    implementation 'com.amulyakhare:com.amulyakhare.textdrawable:1.0.1'
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.wang.avi:library:2.1.3'
    implementation 'hanks.xyz:htextview-library:0.1.5'
    implementation 'com.github.badoualy:stepper-indicator:1.0.6'
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'me.dm7.barcodescanner:zxing:1.9.8'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.github.kenglxn.QRGen:android:2.3.0'
    implementation 'de.hdodenhof:circleimageview:2.1.0'
    implementation 'com.ogaclejapan.smarttablayout:library:1.6.1@aar'

    androidTestImplementation('com.android.support.test:runner:0.4.1') {
        exclude module: 'support-annotations'
    }
    androidTestImplementation('com.android.support.test:rules:0.4.1') {
        exclude module: 'support-annotations'
    }
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.1') {
        exclude module: 'support-annotations'
    }
    androidTestImplementation 'com.google.code.findbugs:jsr305:3.0.2'

    annotationProcessor "com.google.dagger:dagger-android-processor:$DAGGER_VERSION"
    annotationProcessor "com.google.dagger:dagger-compiler:$DAGGER_VERSION"
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    implementation 'com.crashlytics.sdk.android:crashlytics:2.9.9'
}

project.afterEvaluate {
    println("afterEvaluate")
    tasks.each { theTask ->
        if (theTask.name.matches("assemble.+Release")) {
            theTask.doLast {
                // Bump version Build
                println("Adding a version build bump to task " + theTask.name)
                def newVersion = project.ext.versionBuild + 1
                def versionProps = project.ext.versionProps
                versionProps.setProperty('VERSION_BUILD', newVersion.toString())
                def old = versionProps;
                versionProps = new Properties()
                versionProps.putAll(old)
                versionProps.store(versionFile.newWriter(), null)
            }
        }
    }
}

File propFile = file('signing.properties');
if (propFile.exists()) {
    def Properties props = new Properties()
    props.load(new FileInputStream(propFile))

    if (props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        android.buildTypes.release.signingConfig = null
    }
} else {
    android.buildTypes.release.signingConfig = null
}
